#!/usr/bin/env bash
#
# If a custom Node version is not already defined, we look
# for a Node version semver expressing in the current tree's package.json.
# If we find a fixed version, we print it out.  If we find a range we
# test the installed versions against that range and print the
# greatest matching version.


# Setup for relative includes. Adapted from:
# http://www.ostricher.com/2014/10/the-right-way-to-get-the-directory-of-a-bash-script/
# http://stackoverflow.com/a/12694189/407845
get_script_dir() {
  local dir
  local src="${BASH_SOURCE[0]}"

  # while $src is a symlink, resolve it
  while [ -h "$src" ]; do
    dir="${src%/*}"
    src="$( readlink "$src" )"

    # If $src was a relative symlink (so no "/" as prefix),
    # need to resolve it relative to the symlink base directory
    [[ $src != /* ]] && src="$dir/$src"
  done
  dir="${src%/*}"

  if [ -d "$dir" ]; then
    echo "$dir"
  else
    echo "$PWD"
  fi
}

find_package_json_path() {
  local root="$1"
  while [ -n "$root" ]; do
    if [ -e "${root}/package.json" ]; then
      echo "${root}/package.json"
      exit
    fi
    root="${root%/*}"
  done
}

should_find_in_package_json() {
  [ -z "$(nodenv local 2>/dev/null)" ]
}

version_from_package_json() {
  local version_regex='"node":[ \t]*"([^"]*)"'
  [[ $(cat "$PACKAGE_JSON_PATH") =~ $version_regex ]]
  local version_expression="${BASH_REMATCH[1]}"

  local -a installed_versions
  if [[ -n "$version_expression" ]] ; then
    while IFS= read -r v; do
      installed_versions+=( "$v" )
    done < <(nodenv versions --bare)

    version=$("$SEMVER" -r "$version_expression" "${installed_versions[@]}" \
      | tail -n 1)
    if [[ -n "$version" ]] ; then
      echo "$version"
    else
      echo "$version_expression"
      exit 1
    fi
  fi
}

DIR="$(get_script_dir)"
SEMVER="$DIR/../node_modules/sh-semver/semver.sh"

if should_find_in_package_json; then
  PACKAGE_JSON_PATH=$(find_package_json_path "$PWD")

  if [ -e "$PACKAGE_JSON_PATH" ]; then
    version_from_package_json
  fi
fi
